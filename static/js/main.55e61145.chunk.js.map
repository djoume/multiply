{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","score","guess","num1","num2","history","timeleft","running","onStart","bind","assertThisInitialized","onSubmit","onGuessChange","generateRandom","updateScore","_this$state","react_default","a","createElement","className","src","celebrate","Fragment","type","value","onChange","level","onClick","map","item","key","timestamp","message","setState","startTimer","event","target","preventDefault","_this$state2","concat","console","log","random","celebrations","Math","floor","length","score_diff","_this$state3","new_score","happyFace","sadFace","unshift","Date","now","stopTimer","round","_this2","timerId","timeAvailable","setInterval","clearInterval","faces","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55e61145.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { score: 0, guess: '', num1: 2, num2: 2, history: [], timeleft: 10, running: false };\n\n    this.onStart = this.onStart.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onGuessChange = this.onGuessChange.bind(this);\n    this.generateRandom = this.generateRandom.bind(this);\n    this.updateScore = this.updateScore.bind(this);\n  }\n\n  render() {\n    const { score, guess, num1, num2, history, timeleft, running } = this.state\n    return (\n      <div className=\"App\">\n        <div>\n          <h2>Revise tes tables de multiplications!</h2>\n          { !running && score >= 0 && \n            <div><img src={ this.celebrate() } /></div> }\n          { running ? <React.Fragment>\n            <form onSubmit={this.onSubmit}>\n              {num1} x {num2} =\n              <input\n                type=\"text\"\n                value={guess}\n                onChange={this.onGuessChange}\n              />\n            </form>\n          <h2>Ton score: {score} - Niveau {this.level()} - Temps restant: { timeleft }</h2>\n          </React.Fragment>\n          : <button onClick={this.onStart}>{\"Let's Go!\"}</button> }\n        </div>\n        <div className=\"App-history\">\n          { history.map(item => <div key={item.timestamp}><code>{item.message}</code></div>) }\n        </div>\n      </div>\n    );\n  }\n\n  onStart() {\n    this.setState( { score: 0, guess: '', history: [], running: true });\n    this.generateRandom();\n    this.startTimer();\n  }\n\n  onGuessChange(event) {\n    this.setState({\n      guess: event.target.value\n    });\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    const { guess, num1, num2 } = this.state\n    if (guess == num1 * num2) {\n      this.updateScore(`Bravo!`, 4);\n      this.setState({ guess: ''});\n      this.generateRandom();\n    } else {\n      this.updateScore(`Mauvaise r√©ponse! ${num1} x ${num2} n'est pas √©gal √† ${guess}!`, -5);\n    }\n    console.log(this.state);\n  }\n\n  generateRandom() {\n    this.setState({\n      num1: this.random(),\n      num2: this.random(),\n    })\n  }\n\n  celebrate() {\n    const celebrations = [\n      \"https://media2.giphy.com/media/NsBjgqR8jBy2mMptZF/giphy.gif\",\n      \"https://media.giphy.com/media/RtdRhc7TxBxB0YAsK6/giphy.gif\",\n      \"https://media.giphy.com/media/S99cgkURVO62qemEKM/giphy.gif\",\n      \"https://media.giphy.com/media/ftGTY1fO9ARUI/giphy.gif\",\n      \"https://media.giphy.com/media/3oz8xRF0v9WMAUVLNK/giphy.gif\",\n      \"https://media.giphy.com/media/MhHXeM4SpKrpC/giphy.gif\",\n      \"https://media.giphy.com/media/65HR2UL6nn6XMSUoRA/giphy.gif\",\n      \"https://media.giphy.com/media/atQF1zaSGq8s8/giphy.gif\",\n    ];\n\n    return celebrations[Math.floor(Math.random() * celebrations.length)];\n  }\n\n  updateScore(message, score_diff) {\n    const { history, score } = this.state;\n    let new_score = score + score_diff;\n    if (new_score > score)\n      message += ` ${this.happyFace()} Yes! +`;\n    else\n      message += ` ${this.sadFace()} Oh no! `;\n    message += `${new_score - score} point(s). Ton score: ${new_score}`;\n    history.unshift({timestamp: Date.now() , message });\n    this.setState({\n      score: new_score,\n      history\n    });\n    this.stopTimer();\n    if (new_score >= 100) {\n      this.setState({\n        running: false,\n      })\n    } else {\n      this.startTimer();\n    }\n  }\n\n  random() {\n    return 2 + Math.round(Math.random() * 10);\n  }\n\n  startTimer() {\n    if (this.timerId) return;\n    this.setState({ timeleft: this.timeAvailable()});\n    this.timerId = setInterval(() => {\n      let { timeleft } = this.state;\n      timeleft -= 1;\n      if (timeleft < 0) {\n        this.updateScore(\"Trop lent!\", - 1);\n        timeleft = this.timeAvailable();\n      }\n      this.setState({ timeleft });\n    }, 1000)\n  }\n\n  stopTimer() {\n    clearInterval(this.timerId);\n    this.timerId = null;\n  }\n\n  level() {\n    const { score } = this.state;\n    if (score < 5)\n      return 1\n    if (score < 10)\n      return 2\n    if (score < 15)\n      return 3\n    if (score < 20)\n      return 4\n    if (score < 35)\n      return 5\n    if (score < 60)\n      return 6\n    if (score < 85)\n      return 7\n    if (score < 100)\n      return 8\n  }\n\n  timeAvailable() {\n    let level = this.level();\n    if (level > 6)\n      return 3\n    if (level > 5)\n      return 5\n    if (level > 4)\n      return 6\n    if (level > 3)\n      return 7\n    if (level > 2)\n      return 8\n    return 10\n  }\n\n  happyFace() {\n    switch(this.level()) {\n    case 1:\n      return 'üôÇ'\n    case 2:\n      return 'üòÄ'\n    case 3:\n      return 'üòÅ'\n    case 4:\n      return 'üòõ'\n    case 5:\n      return 'üòç'\n    case 6:\n      return 'ü§©'\n    case 7:\n      return 'üòé'\n    default:\n      return 'ü§ì'\n    }\n  }\n\n  sadFace() {\n    let faces = ['ü§î', 'üòê', 'üò¢', 'üòï', 'üò±', 'üò°'];\n    return faces[Math.round(Math.random() * (faces.length - 1))];\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}